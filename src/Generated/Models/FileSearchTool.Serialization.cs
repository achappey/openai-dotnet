// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace OpenAI.Assistants
{
    public partial class FileSearchTool : IJsonModel<FileSearchTool>
    {
        void IJsonModel<FileSearchTool>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileSearchTool)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();

            if (MaxNumResults.HasValue)
            {
                writer.WritePropertyName("max_num_results"u8);
                writer.WriteNumberValue(MaxNumResults.Value);
            }

            writer.WriteEndObject();
        }

        FileSearchTool IJsonModel<FileSearchTool>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(FileSearchTool)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeFileSearchTool(document.RootElement, options);
        }

        internal static FileSearchTool DeserializeFileSearchTool(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            int? maxNumResults = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("max_num_results"u8))
                {
                    maxNumResults = property.Value.GetInt32();
                    continue;
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new FileSearchTool(maxNumResults);
        }

        BinaryData IPersistableModel<FileSearchTool>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(FileSearchTool)} does not support writing '{options.Format}' format.");
            }
        }

        FileSearchTool IPersistableModel<FileSearchTool>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<FileSearchTool>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeFileSearchTool(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(FileSearchTool)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<FileSearchTool>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        internal static new FileSearchTool FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeFileSearchTool(document.RootElement);
        }
    }
}
